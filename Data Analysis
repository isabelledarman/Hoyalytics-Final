#imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from matplotlib import colors
from datetime import datetime
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import MeanShift, estimate_bandwidth
from sklearn import metrics
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import MiniBatchKMeans

#some cleaning
df = pd.read_csv('/content/Final Project Data - Customer_Demographic.csv')

df = df.dropna()

df = df.drop_duplicates()

to_remove = [',', ' ', '$']

for col_name in df[['past_3_years_bike_related_purchases']]:
  for c in to_remove:
    df[col_name] = df[col_name].str.replace(c, '')

df = df.astype({'past_3_years_bike_related_purchases': 'float'})

df = df[~(df['customer_id'] >= 4000)]

df.rename(columns = {"gender  ": "gender"}, inplace = True)

df.gender = df.gender.replace('Female', 'F', regex = True)
df.gender = df.gender.replace('Femal', 'F', regex = True)

df.gender = df.gender.replace('Male', 'M', regex = True)

#importing other data and joining
df2 = pd.read_csv('/content/Final Project Data - New_Data.csv')

df3 = pd.merge(df, df2, on=['customer_id'], how = 'inner')

# Function to calculate age as of November 2017
def calculate_age(birthdate, reference_date):
    birthdate = datetime.strptime(birthdate, '%Y-%m-%d')
    reference_date = datetime.strptime(reference_date, '%Y-%m-%d')
    age = reference_date.year - birthdate.year - ((reference_date.month, reference_date.day) < (birthdate.month, birthdate.day))
    return age

# Set the reference date to November 2017
reference_date = '2017-11-01'

# Apply the function to create a new 'age' column
df3['age'] = df3['DOB'].apply(lambda x: calculate_age(x, reference_date))

#dropping some unimportant columns
df3.drop(['DOB'], axis = 1, inplace = True)
df3.drop(['first_name'], axis = 1, inplace = True)
df3.drop(['last_name'], axis = 1, inplace = True)
df3.drop(['job_title'], axis = 1, inplace = True)
df3.drop(['deceased_indicator'], axis = 1, inplace = True)
df3.drop(['customer_id'], axis = 1, inplace = True)
df3.drop(['owns_car'], axis = 1, inplace = True)
df3.drop(['job_industry_category'], axis = 1, inplace = True)

df3 = df3[~(df3['age'] >= 90)]

#create encoder here
encoder = LabelEncoder()
dictionary = []

#gender
encoder.fit(df3['gender'])
df3['gender'] = encoder.transform(df3['gender'])
dictionary.append(encoder.classes_)

#wealth_segment
encoder.fit(df3['wealth_segment'])
df3['wealth_segment'] = encoder.transform(df3['wealth_segment'])
dictionary.append(encoder.classes_)

#splitting into testing and training sets
percent = 0.8
index_split = int(len(df3) * percent)
train = df3.iloc[:index_split, :]
test = df3.iloc[index_split:, :]
dfK = df3.drop(['gender',	'wealth_segment',	'credit_score',	'age'], axis = 1)

#plot the two features
df3 = df3.values
plt.scatter(df3[:, 1], df3[:, 5], c = '#1261a0')
plt.xlabel('Money Spent')
plt.ylabel('Age')
plt.plot()
plt.show()

#bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=500)
bandwidth = estimate_bandwidth(df3, quantile=0.2, n_samples=500)

ms = MeanShift(bandwidth=bandwidth, bin_seeding=True)
ms.fit(df3)
labels = ms.labels_
cluster_centers = ms.cluster_centers_

labels_unique = np.unique(labels)
n_clusters_ = len(labels_unique)



plt.figure(1)
plt.clf()

colors = ["#1261a0", "#072f5f", "#f781bf"]
markers = ["x", "o", "^"]

for k, col in zip(range(n_clusters_), colors):
    my_members = labels == k
    cluster_center = cluster_centers[k]
    plt.plot(df3[my_members, 1], df3[my_members, 5], markers[k], color=col)
    plt.plot(
        cluster_center[0],
        cluster_center[1],
        markers[k],
        markerfacecolor=col,
        markeredgecolor="k",
        markersize=14,
    )
plt.title("Estimated number of clusters: %d" % n_clusters_)
plt.xlabel('Money Spent')
plt.ylabel('Age')
plt.show()

plt.scatter(df3[:, 1], df3[:, 4], c = '#1261a0')
trainK = train.drop(['gender',	'wealth_segment',	'credit_score',	'age'], axis = 1)
testK = test.drop(['gender',	'wealth_segment',	'credit_score',	'age'], axis = 1)
plt.xlabel('Money Spent')
plt.ylabel('Happiness')
plt.plot()
plt.show()

# Plot the results
plt.figure(figsize=(12, 5))

# Plot data points
plt.subplot(1, 2, 1)
kmeans = MiniBatchKMeans(n_clusters=2, random_state=0, batch_size=6, n_init="auto")
kmeans = kmeans.partial_fit(dfK)
plt.scatter(dfK[:, 0], dfK[:, 1], c=kmeans.labels_, cmap='viridis', s=50, alpha=0.7)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='#ecf7ff', marker='o', s=200, label='Centroids')
plt.title('Mini-Batch K-Means Clustering (Partial Fit)')
plt.xlabel('Happiness')
plt.ylabel('Money Spent')
plt.legend()

# Plot data points for the full fit
plt.subplot(1, 2, 2)
plt.scatter(dfK[:, 0], dfK[:, 1], c=kmeans.labels_, cmap='viridis', s=50, alpha=0.7)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='#ecf7ff', marker='o', s=200, label='Centroids')
plt.title('Mini-Batch K-Means Clustering (Full Fit)')
plt.xlabel('Happiness')
plt.ylabel('Money Spent')
plt.legend()

plt.tight_layout()
plt.show()

df4 = test.drop(['gender',	'wealth_segment',	'Happiness Score',	'age'], axis = 1)
df4 = df4.values
plt.scatter(df4[:, 0], df4[:, 1], c = '#1261a0')
plt.xlabel('Money Spent')
plt.ylabel('Credit Score')
plt.plot()
plt.show()

clustering = DBSCAN(eps = 10, min_samples = 2).fit(df4)
dbscan_labels = clustering.labels_
dbscan_labels

#plot results
plt.scatter(df4[dbscan_labels == 0, 0], df4[dbscan_labels == 0, 1], c = '#072f5f', label='Cluster 1')
plt.scatter(df4[dbscan_labels == 1, 0], df4[dbscan_labels == 1, 1], c = '#3895d3', label='Cluster 2')
plt.scatter(df4[dbscan_labels == 2, 0], df4[dbscan_labels == 2, 1], c = '#3895d3')
plt.scatter(df4[dbscan_labels == -1, 0], df4[dbscan_labels == -1, 1], c = '#ecf7ff', label='No Cluster')
plt.legend()
plt.show()

# Group by gender and calculate the total amount spent
gender_spending = df.groupby('gender')['past_3_years_bike_related_purchases'].sum().reset_index()

# Create a bar graph
plt.bar(gender_spending['gender'], gender_spending['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0'])

# Add labels and title
plt.xlabel('Gender')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Gender (total)')

# Show the plot
plt.show()

# Group by gender and calculate the total amount spent
gender_spending = df.groupby('gender')['past_3_years_bike_related_purchases'].mean().reset_index()

# Create a bar graph
plt.bar(gender_spending['gender'], gender_spending['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0', '#3895d3'])

# Add labels and title
plt.xlabel('Gender')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Gender (mean)')

# Show the plot
plt.show()

# Group by gender and calculate the total amount spent
wealth = df.groupby('wealth_segment')['past_3_years_bike_related_purchases'].sum().reset_index()

# Create a bar graph
plt.bar(wealth['wealth_segment'], wealth['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0', '#3895d3'])

# Add labels and title
plt.xlabel('Wealth Segment')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Wealth Segment (total)')

# Show the plot
plt.show()

# Group by gender and calculate the total amount spent
wealth = df.groupby('wealth_segment')['past_3_years_bike_related_purchases'].mean().reset_index()

# Create a bar graph
plt.bar(wealth['wealth_segment'], wealth['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0', '#3895d3'])

# Add labels and title
plt.xlabel('Wealth Segment')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Wealth Segment (mean)')

# Show the plot
plt.show()

# Group by gender and calculate the total amount spent
credit_score = df.groupby('credit_score')['past_3_years_bike_related_purchases'].sum().reset_index()

# Create a bar graph
plt.bar(credit_score['credit_score'], credit_score['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0', '#3895d3'])

# Add labels and title
plt.xlabel('Credit Score')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Credit Score')

# Show the plot
plt.show()

# Group by gender and calculate the total amount spent
age = df3.groupby('age')['past_3_years_bike_related_purchases'].sum().reset_index()

# Create a bar graph
plt.bar(age['age'], age['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0', '#3895d3'])

# Add labels and title
plt.xlabel('Age')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Age (total)')

# Show the plot
plt.show()

# Group by gender and calculate the total amount spent
age = df3.groupby('age')['past_3_years_bike_related_purchases'].mean().reset_index()

# Create a bar graph
plt.bar(age['age'], age['past_3_years_bike_related_purchases'], color=['#072f5f', '#1261a0', '#3895d3'])

# Add labels and title
plt.xlabel('Age')
plt.ylabel('Amount Spent')
plt.title('Amount Spent by Age (mean)')

# Show the plot
plt.show()
